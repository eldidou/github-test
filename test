(add-to-list 'load-path "~/.emacs.d/")

(set-frame-font "Ubuntu Mono-11")

(setq-default frame-title-format "EMACS  %b")

(defun toggle-fullscreen ()
    (interactive)
    (x-send-client-message nil 0 nil "_NET_WM_STATE" 32 '(2 "_NET_WM_STATE_MAXIMIZED_VERT" 0))
    (x-send-client-message nil 0 nil "_NET_WM_STATE" 32 '(2 "_NET_WM_STATE_MAXIMIZED_HORZ" 0)))
(toggle-fullscreen)
;; .Xresources
;; Emacs23.menuBar: off
;; Emacs23.toolBar: off
;; Emacs23.verticalScrollBars: off

(setq inhibit-startup-buffer-menu t)
(setq inhibit-startup-message t)
(setq inhibit-startup-screen t)
(defun startup-echo-area-message() "")

(setq backup-directory-alist '(("." . "~/.emacs.d/backup/")))
cdscsdcsdc
(fset 'yes-or-no-p 'y-or-n-p)

(setq require-final-newline 't)

(setq compilation-ask-about-save nil)

(setq initial-scratch-message nil)

(setq auto-save-interval 1000)

(setq use-dialog-box nil)

(add-hook 'before-save-hook 'delete-trailing-whitespace)

(setq x-select-enable-clipboard t)

(setq echo-keystrokes 0.1)

(setq mouse-yank-at-point t)
(mouse-avoidance-mode 'exile)
(setq moudazse-avoidance-threshold 200)

(setq track-eol t)

(show-paren-mode 1)

(defun my-mode-insert-on()
    (setq overwrite-mode t)
    (setq cursor-type 'box))
(defun my-mode-insert-off()
    (setq overwrite-mode nil)
    (setq cursor-type '(bar . 2)))
(global-set-key [(insert)] '(lambda ()
                                (interactive)
                                (if overwrite-mode
                                    (my-mode-insert-off)
                                    (my-mode-insert-on))))

(custom-set-faces
    '(default ((t (:foreground "#ffffff" :background "#151515"))))
    '(cursor ((t (:background "#ffee22"))))
    '(minibuffer-prompt ((t (:foreground "#88ccff"))))
    '(show-paren-match ((t (:foreground "#0077e0" :bold t))))
daz    '(show-paren-mismatch ((t (:foreground "#ff0000" :bold t))))
    '(font-lock-variable-name-face  ((t (:foreground "#ffec8b"))))
    '(font-lock-comment-face  ((t (:foreground "#777777"))))
    '(font-lock-doc-face  ((t (:foreground "#10A070"))))
    '(font-lock-function-name-face ((t (:foreground "#5599ff" :bold t))))
    '(font-lock-stdaring-face ((t (:foreground "#ffa07a"))))
    '(font-lock-warning-face ((t (:foreground "#ff0000" :bold t))))
    '(dazfont-lock-builtin-face ((t (:foreground "#ff2244"))))
    '(font-lock
-keyword-face ((t (:foreground "#ffcc00" :bold t))))
               '(font-lock-type-face ((t (:foreground "#50f073"))))
               '(font-lock-constant-face ((t (:foreground "#00ffff"))))
               '(fringe ((t (:background "#000010" :foreground "#ffff55"))))
               '(isearch ((t (:background "#ffff00" :foreground "#000000"))))
               '(isearch-lazy-highlight-face ((t (:background "#40ccff" :foreground "#000000"))))
               '(highlighadt ((t (:background "#101010"))))
               '(ido-first-match ((t (:foreground "#ffcc00" :bold t))))
    '(ido-indicator-face ((t (:foreground "#FF0000"))))
    '(ido-only-match ((((class color)) (:foreground "#00cc00" :bold t))))
    '(ido-subdir ((((min-colors 88) (class color)) (:foreground "#cc0000" :bold t))))
       '(region ((t (:inverse-video t))))
       '(compilation-error ((t (:inherit error :foreground "#ff0000"))))
       '(compilation-warning ((t (:inherit error :foreground "#ff9900"))))
       '(makefile-space ((t (:background "#ff0000"))))
       '(mode-line ((t (:background "#202020" :box (:line-width -1 :color "#808080") :foreground "#ffffff"))))
       '(mode-line-inactive ((t (:background "#000000" :box (:line-width -1 :color "#303030") :foreground "#ffffff")))))

;; (hl-line-mode 1)

(column-number-mode t)
(defun my-mode-line ()
    (list
        (propertize " %*%+" 'face 'font-lock-constant-face)
        (propertize " %b" 'face 'font-lock-keyword-face)
        (propertize " (%m)" 'face 'font-lock-type-face)
        (propertize (concat " [l%l/"
                        (int-to-string (line-number-at-pos (point-max)))
                        "] [c%c]") 'face 'font-lock-variable-name-face)))
(setq-default mode-line-format (my-mode-line))

(add-hook 'find-file-hook '(lambda () (setq mode-line-format (my-mode-line))))
(add-hook 'after-save-hook '(lambda () (setq mode-line-format (my-mode-line))))
(add-hook 'after-revert-hook '(lambda () (setq mode-line-format (my-mode-line))))
(add-hook 'dired-after-readin-hook '(lambda () (setq mode-line-format (my-mode-line))))

(setq default-cursor-type '(bar . 2))
(blink-cursor-mode t)
(setq blink-cursor-interval 0.2)
(setq blink-cursor-delay 1)
(setq cursor-type 'bar)

(setq ring-bell-function `ignore)

(global-font-lock-mode t)

(global-cwarn-mode t)

(setq-default x-stretch-cursor t)

(setq-default truncate-lines t)
(setq-default truncate-partial-width-windows t)

;; (setq-default left-fringe-width 4)
(setq-default right-fringe-width 3)
(setq-default indicate-empty-lines t)

(global-set-key [(mouse-5)] '(lambda()(interactive)(scroll-up 10)))
(global-set-key [(mouse-4)] '(lambda()(interactive)(scroll-down 10)))

(global-set-key [(meta g)] 'goto-line)

(global-set-key [(shift up)] 'windmove-up)
(global-set-key [(shift down)] 'windmove-down)
(global-set-key [(shift right)] 'windmove-right)
(global-set-key [(shift left)] 'windmove-left)

(global-set-key [(home)] 'my-beginning-of-line)
(global-set-key [(end)] 'end-of-line)
(global-set-key [(control home)] 'beginning-of-buffer)
(global-set-key [(control end)] 'end-of-buffer)
(global-set-key [(control prior)] 'beginning-of-buffer)
(global-set-key [(control next)] 'end-of-buffer)
(global-set-key [(prior)] '(lambda () (interactive) (scroll-down 10)))
(global-set-key [(next)] '(lambda () (interactive) (scroll-up 10)))
(global-set-key [(control shift down)] '(lambda () (interactive)
                                            (next-line 5)
                                            (scroll-up 5)
                                            (recenter 20)))
(global-set-key [(control shift up)] '(lambda () (interactive)
                                          (next-line -5)
                                          (scroll-down 5)
                                          (recenter 20)))

(defun my-match-paren()
    (interactive)
    (cond
        ((or (equal (char-before) 41)
             (equal (char-before) 93)
             (equal (char-before) 62)
             (equal (char-before) 125))
            (backward-list 1))
        ((and (equal (char-before) 47) (equal (char-before (- (point) 1)) 42))
            (search-backward "/*"))
        ((or (equal (char-after) 40)
             (equal (char-after) 91)
             (equal (char-after) 60)
             (equal (char-after) 123))
            (forward-list 1))
        ((and (equal (char-after) 47) (equal (char-after (+ (point) 1)) 42)
             (search-forward "*/")))
        ((or (equal (char-after) 41)
             (equal (char-after) 93)
             (equal (char-after) 62)
             (equal (char-after) 125))
            (progn (forward-char)
                (backward-list 1)
                (forward-char)))
        ((or (equal (char-before) 40)
             (equal (char-before) 91)
             (equal (char-before) 60)
             (equal (char-before) 123))
            (progn (backward-char)
                (forward-list 1)
                (backward-char)))))
(global-set-key [(control z)] 'my-match-paren)

(defun my-beginning-of-line()
    (interactive)
    (if (equal (save-excursion (back-to-indentation) (point))
            (point))
        (beginning-of-line)
        (back-to-indentation)))
(global-set-key [(control a)] 'my-beginning-of-line)

(global-set-key [(control x) (control b)] 'bs-show)
(setq bs-configurations '(("all" nil nil "TAGS\\|\\.d$" nil nil)
                             ("files" nil nil "TAGS\\|\\.d$" bs-visits-non-file bs-sort-buffer-interns-are-last)))

(global-set-key [(control x) (control k)] '(lambda () (interactive) (kill-buffer (current-buffer))))

(global-set-key [(control ?\')] '(lambda () (interactive) (enlarge-window-horizontally -1)))
(global-set-key [(control ?\()] '(lambda () (interactive) (enlarge-window-horizontally 1)))
(global-set-key [(control ?\-)] '(lambda () (interactive) (enlarge-window -1)))
(global-set-key [(control ?\è)] '(lambda () (interactive) (enlarge-window 1)))

(setq split-height-threshold nil)
(setq split-width-threshold 120)
(defun my-split-window-horizontally()
    (interactive)
    (split-window-horizontally)
    (windmove-right))
(defun my-split-window-vertically()
    (interactive)
    (split-window-vertically)
    (windmove-down))
(global-set-key [(control ?\&)] 'delete-other-windows)
(global-set-key [(control ?\é)] 'my-split-window-vertically)
(global-set-key [(control ?\")] 'my-split-window-horizontally)
(global-set-key [(control ?\à)] 'delete-window)

(delete-selection-mode t)

(defun c-backslash-region (a b c &optional d))
(global-set-key [(control x) (tab)] '(lambda ()
                                         (interactive)
                                         (delete-trailing-whitespace)
                                         (indent-region (point-min) (point-max) nil)))

(add-hook 'lisp-mode-common-hook '(lambda () (local-set-key [return] 'reindent-then-newline-and-indent)))
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [return] 'reindent-then-newline-and-indent)))

(add-hook 'c-mode-common-hook '(lambda () (c-toggle-hungry-state 1)))

(add-hook 'compilation-mode-hook '(lambda ()
                                      (setq truncate-lines nil)
                                      (setq truncate-partial-width-windows nil)))
(add-hook 'compilation-mode-hook '(lambda () (local-set-key [(q)] 'delete-window)))
(setq compilation-auto-jump-to-first-error t)

(defun my-kill-selection()
    (interactive)
    (if mark-active
        (kill-region (mark 1) (point))
        (beginning-of-line)
        (kill-line 1)))

(defun my-move-up-selection()
    (interactive)
    (let ((temp (< (point) (mark 1))))
        (kill-region (point) (mark 1))
        (if (eq (point) 1)
            (newline 1))
        (forward-line -1)
        (yank)
        (if temp
            (exchange-point-and-mark))))

(defun my-move-up-line()
    (interactive)
    (beginning-of-line)
    (kill-line 1)
    (if (eq (point) 1)
        (newline 1))
    (forward-line -1)
    (beginning-of-line)
    (yank)
    (forward-line -1))

(defun my-move-up()
    (interactive)
    (if (eq mark-active nil)
        (my-move-up-line)
        (my-move-up-selection))
    (error ""))

(defun my-move-down-selection()
    (interactive)
    (let ((column (current-column))
             (temp (< (point) (mark 1))))
        (kill-region (point) (mark 1))
        (if (eq (point) (point-max))
            (newline 1)
            (forward-line 1))
        (yank)
        (if temp
            (exchange-point-and-mark))
        (move-to-column column)))

(defun my-move-down-line()
    (interactive)
    (beginning-of-line)
    (let ((column (current-column)))
        (message (int-to-string 1))
        (kill-line 1)
        (if (eq (point) (point-max))
            (newline 1)
            (forward-line 1))
        (beginning-of-line)
        (yank)
        (forward-line -1)
        (move-to-column column)))

(defun my-move-down()
    (interactive)
    (message (int-to-string 1))
    (if (eq mark-active nil)
        (my-move-down-line)
        (my-move-down-selection))
    (error ""))

(global-set-key [(meta up)] 'my-move-up)
(global-set-key [(meta down)] 'my-move-down)
(global-set-key [(meta shift up)] '(lambda()(interactive)(previous-line 10)))
(global-set-key [(meta shift down)] '(lambda()(interactive)(next-line 10)))

(defun my-open-line-and-indent()
    (interactive)
    (save-excursion
        (newline-and-indent))
    (indent-for-tab-command))
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control o)] 'my-open-line-and-indent)))

(setq undo-limit 200000)
(setq undo-strong-limit 300000)
(global-set-key [(control \;)] 'undo)

(defun my-rename-file(new-file-name)
    (interactive "Frenommer le fichier en : ")
    (rename-file buffer-file-name
        new-file-name)
    (kill-buffer (current-buffer))
    (find-file new-file-name))
(global-set-key [(control x) (control r)] 'my-rename-file)

(defun my-find-file()
    (interactive)
    (if (not (boundp 'ido-enabled))
        (ido-mode t))
    (fset 'ido-find-file-read-only 'my-rename-file)
    (fset 'ido-write-file 'write-file)
    (ido-find-file))
(global-set-key [(control x) (control f)] 'my-find-file)
(global-set-key [(control x) (f)] 'my-find-file)

(global-set-key [(control x) (control v)] '(lambda ()
                                               (interactive)
                                               (revert-buffer nil t t)))

(setq completion-ignored-extensions '(".o" ".elc" "~" ".dvi" ".toc" ".log" ".aux" ".lof" ".m" ".ps" ".out"))

(global-set-key [(f9)] '(lambda () (interactive) (my-make "./" 6 "Makefile" "")))
(global-set-key [(f8)] '(lambda () (interactive)
                            (shell-command "cmake .")
                            (my-make "./" 6 "Makefile" " clean")))

(defun my-make (directory level makefile command)
    (interactive "smake ")
    (if (> level 0)
        (if (file-exists-p (concat directory makefile))
            (progn (fset 'yes-or-no-p '(lambda (prompt) t))
                (compile (concat "make -C " directory " -j 8 -f " makefile command))
                (fset 'yes-or-no-p 'y-or-n-p)
                (let ((ancien-buffer (current-buffer)))
                    (while (not (eq (current-buffer) (get-buffer "*compilation*")))
                        (other-window 1))
                    (goto-char (point-max))
                    (while (not (eq (current-buffer) ancien-buffer))
                        (other-window 1))))
            (my-make (concat "../" directory) (- level 1) makefile command))))

(global-set-key [(f10)] 'first-error)
(global-set-key [(f11)] 'previous-error)
(global-set-key [(f12)] 'next-error)

(setq-default abbrev-mode t)
(setq save-abbrevs nil)
(global-set-key [(control tab)] 'dabbrev-expand)
(icomplete-mode 1)

(defun string-replace (this withthat in)
    (with-temp-buffer
        (insert in)
        (goto-char (point-min))
        (while (search-forward this nil t)
            (replace-match withthat nil t))
        (buffer-substring (point-min) (point-max))))
(defun my-grep(string)
    (interactive "sGrep : ")
    (grep (concat "grep -iIne "
              (string-replace "(" "\\("
                  (string-replace ")" "\\)"
                      (string-replace ";" "\\;"
                          (string-replace "'" "\\'"
                              (string-replace "&" "\\&"
                                  (string-replace "\"" "\\\""
                                      (string-replace "|" "\\|" string))))))) " *")))
(global-set-key [(meta s)] 'my-grep)

(global-unset-key [(control x) (control z)])

(global-set-key [(control f1)] '(lambda () (interactive) (point-to-register 38 nil)))
(global-set-key [(control f2)] '(lambda () (interactive) (point-to-register 39 nil)))
(global-set-key [(f1)] '(lambda () (interactive) (jump-to-register 38 nil)))
(global-set-key [(f2)] '(lambda () (interactive) (jump-to-register 39 nil)))

;; (defun run-term()
;;     (interactive)
;;     (if (get-buffer "*ansi-term*")
;;         (switch-to-buffer "*ansi-term*")
;;         (ansi-term "/bin/bash")))
;; (global-set-key [(f6)] 'run-term)

(setq-default indent-tabs-mode nil)
(setq default-tab-width 4)
(setq lisp-indent-offset 4)
(defun my-text-hook() (local-set-key [(tab)] 'tab-to-tab-stop))
(add-hook 'text-mode-hook 'my-text-hook)
(setq tab-stop-list '(0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60))

(c-add-style "my-style" '("stroustrup"
                             (c-basic-offset . 4)
                             (c-offsets-alist
                                 (comment-intro . 0)
                                 (inline-open . 0)
                                 (inclass . +))))
(setq c-default-style "my-style")

(defun my-comment()
    (interactive)
    (if mark-active
        (if (> (point) (mark 1))
            (comment-or-uncomment-region (mark 1) (point))
            (comment-or-uncomment-region (point) (mark 1)))
        (if (eq 0 (save-excursion
                      (back-to-indentation)
                      (- (point) (line-end-position))))
            (comment-dwim nil)
            (comment-or-uncomment-region (line-beginning-position) (line-end-position)))))

(global-set-key [(control c) (control c)] 'my-comment)
(add-hook 'makefile-mode-hook '(lambda () (local-set-key [(control c) (control c)] 'my-comment)))
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (control c)] 'my-comment)))

(add-hook 'minibuffer-setup-hook (lambda () (setq truncate-lines nil)))
(global-set-key [(control return)] 'newline)

(setq cc-other-file-alist
    '(("solution.cpp" ("problem.cpp"))
         ("problem.cpp" ("solution.cpp"))
         ("\\.c\\'" (".h"))
         ("\\.h\\'" (".cpp" ".c"))
         ("\\.hpp\\'" (".cpp" ".inl"))
         ("\\.cpp\\'" (".hpp" ".h"))
         ("\\.inl\\'" (".hpp"))))
(global-set-key [(meta h)] '(lambda () (interactive) (ff-find-other-file nil t)))

(global-set-key [(control x) (control c)] '(lambda () (interactive)
                                               (save-some-buffers)
                                               (kill-emacs)))

(global-set-key [(control x) (s)] 'save-buffer)

(define-key isearch-mode-map [(control o)]
    (lambda ()
        (interactive)
        (let ((case-fold-search isearch-case-fold-search))
            (occur (if isearch-regexp isearch-string
                       (regexp-quote isearch-string))))))

(setq auto-mode-alist
    '((".bashrc" . shell-script-mode)
         ("\\.c$" . c-mode)
         ("\\.cc$" . c++-mode)
         ("\\.pxx$" . c++-mode)
         ("\\.cpp$" . c++-mode)
         ("\\.inl$" . c++-mode)
         ("\\.h$" . c++-mode)
         ("\\.hpp$" . c++-mode)
         ("\\todo$" . outline-mode)
         ("\\.mk$" . makefile-mode)
         ("Makefile" . makefile-mode)
         ("CMakeLists" . cmake-mode)
         ("CMakeCache" . cmake-mode)
         ("\\.cmake$" . cmake-mode)
         ("\\.py$" . python-mode)
         ("\\.java$" . java-mode)
         ("\\.js$" . javascript-mode)
         ("\\.el$" . emacs-lisp-mode)
         ("\\.emacs$" . emacs-lisp-mode)
         ("\\.xml$" . nxml-mode)
         ("\\.sh$" . sh-mode)
         ("\\.tex$" . tex-mode)
         ("\\.pl$" . perl-mode)
         ("\\.conf$" . conf-mode)
         ("\\.cfg$" . conf-mode)))

(global-set-key [(control w)] '(lambda () (interactive)
                                   (if mark-active
                                       (kill-region (mark) (point))
                                       (backward-kill-word 1))))
(global-set-key [(meta left)] 'my-kill-selection)
(global-set-key [(control v)] 'yank)
(defun my-yank-and-indent()
    (interactive)
    (if mark-active (delete-region (mark 1) (point)))
    (yank)
    (indent-region (min (mark) (point)) (max (mark) (point)))
    (indent-for-tab-command))
(defun my-yank-and-indent-line()
    (interactive)
    (if mark-active
        (delete-region (mark 1) (point))
        (beginning-of-line))
    (yank)
    (indent-region (min (mark) (point)) (max (mark) (point)))
    (indent-for-tab-command))
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(meta right)] 'my-yank-and-indent-line)))
(global-set-key [(meta right)] 'yank)

(setq inhibit-eol-conversion t)
(defun unix2dos()
    (interactive)
    (save-excursion
        (goto-char(point-min))
        (while (search-forward "\n" nil t) (replace-match "\r\n"))))
(defun dos2unix()
    (interactive)
    (save-excursion
        (goto-char(point-min))
        (while (search-forward "\r\n" nil t) (replace-match "\n"))))

(font-lock-add-keywords 'c++-mode '(("[^a-zA-Z]\\(-?[0-9]+[.eE]?[0-9]*[f]?\\)" 1 font-lock-constant-face append)))
(font-lock-add-keywords 'c++-mode '(("[^a-zA-Z]\\(-?0x[0-9a-fA-F]+\\)" 1 font-lock-constant-face append)))
(font-lock-add-keywords 'c++-mode '(("\\<\\(FIXME\\|TODO\\|BUG\\)" 1 font-lock-warning-face prepend)))
(font-lock-add-keywords 'latex-mode '(("\\<\\(FIXME\\|TODO\\|BUG\\)" 1 font-lock-warning-face prepend)))

(setq skeleton-end-newline nil)

(define-skeleton my-skeleton-c-cout
    "" nil
    > "cout << " _ " << endl;")
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (control o)] 'my-skeleton-c-cout)))
(define-skeleton my-skeleton-c-cout-end
    "" nil
    > "cout << endl;")
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (o)] 'my-skeleton-c-cout-end)))

(define-skeleton my-skeleton-c-space
    "" nil
    " << \" \" << ")
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (control ?\ )] 'my-skeleton-c-space)))

(define-skeleton my-skeleton-c-cerr
    "" nil
    > "cerr << " _ " << endl;")
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (control e)] 'my-skeleton-c-cerr)))
(define-skeleton my-skeleton-c-cerr-end
    "" nil
    > "cerr << endl;")
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (e)] 'my-skeleton-c-cerr-end)))

(define-skeleton my-skeleton-c-header
    "" nil
    > "#ifndef " (string-replace "." "_" (upcase (file-relative-name (buffer-file-name)))) "\n"
    > "#define " (string-replace "." "_" (upcase (file-relative-name (buffer-file-name)))) "\n"
    > "\n"
    > "class " (file-relative-name (file-name-sans-extension buffer-file-name)) "\n"
    > "{\n"
    "public:" > "\n"
    (file-relative-name (file-name-sans-extension buffer-file-name)) "();" > "\n"
    > _  "\n"
    "};\n"
    > "\n"
    > "#endif" "\n")
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (control h)] 'my-skeleton-c-header)))

(defun my-c-if()
    (interactive)
    (if mark-active
        (progn
            (my-c-block)
            (backward-char (- (point) (mark)))
            (previous-line))
        (beginning-of-line))
    (my-skeleton-c-if))
(define-skeleton my-skeleton-c-if
    "" nil
    > "if (" _ ")\n" >)
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (control i)] 'my-c-if)))

(define-skeleton my-skeleton-c-opo
    "" nil
    > (cond ((string-equal (file-name-extension buffer-file-name) "cpp")
                (let ((filename (file-relative-name (file-name-sans-extension buffer-file-name))))
                    (concat "ostream& operator<<(ostream& o, const " filename "& " (char-to-string (string-to-char (downcase filename))) ")\n{\n    return o;\n}\n")))
          ((string-equal (file-name-extension buffer-file-name) "h")
              (let ((filename (file-relative-name (file-name-sans-extension buffer-file-name))))
                  (concat "ostream& operator<<(ostream& o, const " filename "& " (char-to-string (string-to-char (downcase filename))) ");\n")))))
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (control l)] 'my-skeleton-c-opo)))

(define-skeleton my-skeleton-c-main
    "" nil
    > "#include <iostream>\n"
    > "#include <cstdlib>\n"
    > "\n"
    > "using namespace std;\n"
    > "\n"
    "int main()\n"
    "{\n"
    > _ "\n"
    >"return EXIT_SUCCESS;\n"
    "}\n")
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (control m)] 'my-skeleton-c-main)))

(defun my-c-block()
    (interactive)
    (if mark-active
        (kill-region (mark) (point))
        (kill-whole-line))
    (my-skeleton-c-block))
(define-skeleton my-skeleton-c-block
    "" nil
    "{" > "\n"
    (my-yank-and-indent)
    "}" > _ "\n" >)
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (control b)] 'my-c-block)))

(defun my-c-for()
    (interactive)
    (if mark-active
        (progn
            (my-c-block)
            (backward-char (- (point) (mark)))
            (previous-line))
        (beginning-of-line))
    (my-skeleton-c-for))
(define-skeleton my-skeleton-c-for
    "" nil
    > "for (int " (setq iter (skeleton-read "iterator : ")) " = 0; " iter " < " _ "; ++" iter ")\n" >)
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (control f)] 'my-c-for)))

(define-skeleton my-skeleton-c-fora
    "" nil
    > "for (auto " (setq iter (skeleton-read "iterator : ")) " = " (setq container (skeleton-read "container : ")) ".begin(); " iter " != " container ".end(); ++" iter ")")
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (control a)] 'my-skeleton-c-fora)))

(defun my-c-zero()
    (interactive)
    (if mark-active
        (progn
            (kill-region (mark) (point))
            (backward-char (- (point) (mark)))
            (my-skeleton-c-zero-selection))
        (my-skeleton-c-zero)))
(define-skeleton my-skeleton-c-zero-selection
    "" nil
    > "memset(" (yank) ", 0, sizeof(" (yank) "));" _ >)
(define-skeleton my-skeleton-c-zero
    "" nil
    > "memset(" (setq pointer (skeleton-read "pointer : ")) ", 0, sizeof(" pointer "));" _ >)
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (control z)] 'my-c-zero)))

(define-skeleton my-skeleton-c-trace
    "" nil
    > "cout << __func__ << \":\" << __LINE__ << endl;")
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (control t)] 'my-skeleton-c-trace)))

(define-skeleton my-skeleton-c-switch
    ""
    nil
    > "switch (" _ ")" \n
    "{" '(indent-for-tab-command) \n
    "case :" '(indent-for-tab-command) \n
    "break;" '(indent-for-tab-command) \n
    "default:;" '(indent-for-tab-command) \n
    "}" '(indent-for-tab-command))
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (control w)] 'my-skeleton-c-switch)))

(define-skeleton my-skeleton-c-debug
    "" nil
    > "cout << \"" (setq variable (skeleton-read "variable : ")) ":\" << " variable " << endl;")
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (control d)] 'my-skeleton-c-debug)))

(define-skeleton my-skeleton-c-vector
    "" nil
    > "vector<" _ ">")
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (control v)] 'my-skeleton-c-vector)))
(define-skeleton my-skeleton-c-list
    "" nil
    > "list<" _ ">")
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (control l)] 'my-skeleton-c-list)))

(define-skeleton my-skeleton-c-push_back
    "" nil
    > "push_back(" _ ")")
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (control p)] 'my-skeleton-c-push_back)))

(define-skeleton my-skeleton-c-size
    "" nil
    > "(int)" _ ".size()")
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (control s)] 'my-skeleton-c-size)))

(define-skeleton my-skeleton-c-less-than
    "" nil
    "        bool operator<(const " _ " & right) const\n" >
    "{" > "\n"
    "return ;" > "\n"
    "}" > "\n")
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control c) (control <)] 'my-skeleton-c-less-than)))

(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(control v)] 'my-yank-and-indent)))
(global-set-key [(meta v)] (lambda () (interactive)
                               (progn
                                   (if (eq last-command (quote yank))
                                       (yank-pop 1)
                                       (yank))
                                   (indent-region (min (mark) (point)) (max (mark) (point))))))
(global-set-key [(control meta d)] 'my-kill-selection)

(require 'subword)
(global-set-key [(control shift backspace)] 'subword-backward-kill)
(global-set-key [(control shift left)] 'subword-backward)
(global-set-key [(control shift right)] 'subword-forward)
(global-set-key [(meta C)] 'subword-capitalize)
(global-set-key [(meta L)] 'subword-downcase)
(global-set-key [(meta U)] 'subword-upcase)
(global-set-key [(meta T)] 'subword-transpose)
(global-set-key [(control shift delete)] 'subword-kill)

(require 'uniquify)
(setq uniquify-buffer-name-style 'reverse)
(setq uniquify-separator "/")
(setq uniquify-after-kill-buffer-p t)
(setq uniquify-ignore-buffers-re "^\\*")

(defun my-zoom (n)
    (set-face-attribute 'default (selected-frame) :height
        (+ (face-attribute 'default :height) (* (if (> n 0) 1 -1) 10))))
(global-set-key [C-kp-add]       '(lambda nil (interactive) (my-zoom 1)))
(global-set-key [C-kp-subtract]  '(lambda nil (interactive) (my-zoom -1)))

(setq killed-rectangle nil)
(defun my-copy-rectangle (start end) (interactive "r")
    (setq killed-rectangle (extract-rectangle start end)))
(global-set-key [(control meta shift w)] 'my-copy-rectangle)
(global-set-key [(control W)] 'kill-rectangle)
(global-set-key [(control V)] 'yank-rectangle)
(global-set-key [(control Q)] 'string-insert-rectangle)

(global-set-key [(f5)] 'compare-windows)
(global-set-key [(f6)] 'linum-mode)

(setq compilation-finish-function
    (lambda (buf str)
        (if (not (or (string-match "exited abnormally" str)
                     (with-current-buffer buf
                         (or (search-forward "attention" nil t)
                             (string-match (buffer-name) "*grep*")))))
            (run-at-time 0.5 nil 'delete-windows-on buf)
            (message "Compilation finished"))))

(global-unset-key [(meta ?\;)])

(defun my-start-paren()
    (interactive)
    (backward-up-list)
    (forward-char)
    )
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(meta a)] 'my-start-paren)))
(defun my-end-paren()
    (interactive)
    (backward-up-list)
    (forward-list)
    (backward-char))
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(meta e)] 'my-end-paren)))

(defun my-select-paren()
    (interactive)
    (if (not mark-active)
        (progn
            (transient-mark-mode 1)
            (set-mark (point))
            (my-end-paren)
            (exchange-point-and-mark)
            (my-start-paren)
            (exchange-point-and-mark))
        (if (< (point) (mark))
            (progn
                (backward-char)
                (my-end-paren)
                (exchange-point-and-mark)
                (forward-char)
                (my-start-paren)
                (exchange-point-and-mark))
            (progn
                (forward-char)
                (my-start-paren)
                (exchange-point-and-mark)
                (backward-char)
                (my-end-paren)
                (exchange-point-and-mark)))))
(add-hook 'c-mode-common-hook '(lambda () (local-set-key [(meta z)] 'my-select-paren)))

(setq gdb-many-windows 1)
test2
